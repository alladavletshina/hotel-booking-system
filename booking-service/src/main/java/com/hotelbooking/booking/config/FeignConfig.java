package com.hotelbooking.booking.config;

import com.hotelbooking.booking.service.InternalAuthService;
import feign.RequestInterceptor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Slf4j
@Configuration
public class FeignConfig {

    private final InternalAuthService internalAuthService;

    public FeignConfig(InternalAuthService internalAuthService) {
        this.internalAuthService = internalAuthService;
        log.info("üéØ === FEIGN CONFIG CONSTRUCTOR CALLED ===");
        log.info("üéØ InternalAuthService injected: {}", internalAuthService != null ? "SUCCESS" : "FAILED");
    }

    @Bean
    public RequestInterceptor internalAuthRequestInterceptor() {
        log.info("üéØ === CREATING FEIGN INTERCEPTOR BEAN ===");

        return requestTemplate -> {
            log.debug("üéØ üî• FEIGN INTERCEPTOR TRIGGERED!");
            log.debug("üéØ URL: {}", requestTemplate.url());
            log.debug("üéØ Method: {}", requestTemplate.method());

            if (requestTemplate.url().contains("/confirm-availability") ||
                    requestTemplate.url().contains("/release")) {

                log.info("üéØ ‚úÖ INTERNAL ENDPOINT DETECTED - Adding auth headers for: {}", requestTemplate.url());

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (internalAuthService == null) {
                    log.error("üéØ ‚ùå InternalAuthService is NULL! Cannot add auth headers");
                    return;
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º InternalAuthService –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
                String token = internalAuthService.getInternalToken();

                if (token != null && !token.trim().isEmpty()) {
                    requestTemplate.header("Authorization", "Bearer " + token);
                    requestTemplate.header("X-Internal-Call", "true");
                    requestTemplate.header("X-Service-Name", "booking-service");

                    log.info("üéØ ‚úÖ Added Authorization header with fresh token");
                    log.debug("üéØ Token prefix: {}...", token.substring(0, Math.min(50, token.length())));
                } else {
                    log.error("üéØ ‚ùå Cannot add auth headers - token is null or empty");

                    // Fallback: –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    String fallbackToken = createSimpleToken();
                    requestTemplate.header("Authorization", "Bearer " + fallbackToken);
                    requestTemplate.header("X-Internal-Call", "true");
                    requestTemplate.header("X-Service-Name", "booking-service");
                    log.warn("üéØ üîÑ Using fallback token for testing");
                }
            }
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
     */
    private String createSimpleToken() {
        try {
            long currentTimeSeconds = System.currentTimeMillis() / 1000;
            long expiryTimeSeconds = currentTimeSeconds + 3600;

            String header = "{\"alg\":\"HS256\",\"typ\":\"JWT\"}";
            String payload = String.format(
                    "{\"sub\":\"internal-service\",\"role\":\"INTERNAL\",\"iat\":%d,\"exp\":%d}",
                    currentTimeSeconds, expiryTimeSeconds
            );

            String encodedHeader = java.util.Base64.getUrlEncoder().withoutPadding()
                    .encodeToString(header.getBytes());
            String encodedPayload = java.util.Base64.getUrlEncoder().withoutPadding()
                    .encodeToString(payload.getBytes());

            return encodedHeader + "." + encodedPayload + ".simple_token_for_testing";
        } catch (Exception e) {
            log.error("Error creating simple token: {}", e.getMessage());
            return "simple-test-token-" + System.currentTimeMillis();
        }
    }
}